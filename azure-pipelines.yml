trigger:
  branches:
    include:
      - main
  paths:
    include:
    - Migrations/* #Solo incluye el trigger por modificación de la carpeta Migrations en main

pool:
  name: LocalPool #Agente local instalado en máquina

variables:
  buildConfiguration: 'Release'
  fullTimestamp: $[format('{0:yyyyMMdd}-{0:HHmmss}', pipeline.startTime)]

jobs:
- job: Build
  displayName: 'Build Job'
  steps:
  - checkout: self
    persistCredentials: true #Permite el acceso a modificar el github

  - task: UseDotNet@2 #Verifica que la versión instalada en sistema sea 9.0 o superior
    inputs:
      packageType: 'sdk'
      version: '9.0.x'

  - script: | #Genera la restauración de las dependencias necesarias
      echo "Restaurando dependencias."
      dotnet restore
    displayName: 'Restore'

  - script: | #Genera la compilación del proyecto a través del comando dotnet
      echo "Compilando proyecto."
      dotnet build --configuration $(buildConfiguration)
    displayName: 'Build'

- job: Database_Update
  displayName: 'Database Update Job'
  dependsOn: Build
  steps:
  - checkout: self
    persistCredentials: true

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '9.0.x'

  - script: | #Actualiza la base de datos con las migraciones nuevas para control actualizado
      echo "Aplicando migraciones."
      dotnet ef database update --project TestProjectCore.csproj --startup-project TestProjectCore.csproj
    displayName: 'EF Core Update'

- job: Publish
  displayName: 'Publish Job'
  dependsOn: Database_Update
  steps:
  - checkout: self
    persistCredentials: true

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '9.0.x'

  - script: | #Publica los anteriores puntos si todo sale bien
      echo "Publicando aplicación."
      dotnet publish -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)
    displayName: 'Publish'

- job: Git_Update
  displayName: 'Git Update Job'
  dependsOn: Publish
  steps:
  - checkout: self
    persistCredentials: true

  - script: |
      # Configuración directa del GitHub
      git config --global user.email "bymynynimonya@gmail.com"
      git config --global user.name "MAONLY2410"

      echo "Actualización automática: $(fullTimestamp)" > changes.log

      # Mostrar archivos modificados
      echo "Archivos modificados:" >> changes.log
      git diff --name-only >> changes.log

      # Mostrar archivos nuevos agregados
      echo "" >> changes.log
      echo "Archivos nuevos agregados:" >> changes.log
      git ls-files --others --exclude-standard >> changes.log

      git add changes.log
      git commit -m "Automatizado por último vez en - $(fullTimestamp) [skip ci]"

      # Evita conflictos entre agentes que apuntan al mismo repo
      git pull --rebase origin main

      git push origin HEAD:main
    displayName: "Hacer cambios y pushear"
