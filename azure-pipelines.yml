trigger:
  branches:
    include:
      - main
  paths:
    include:
      - Migrations/*

pool:
  name: LocalPool

variables:
  buildConfiguration: 'Release'
  fullTimestamp: $[format('{0:yyyyMMdd}-{0:HHmmss}', pipeline.startTime)]
  solution: '**/*.sln'
  projects: '**/*.csproj'

stages:
- stage: Build
  jobs:
  - job: Build_and_Test
    displayName: 'Compilar y probar'
    steps:
    - checkout: self
      persistCredentials: true

    - task: UseDotNet@2
      displayName: 'Instalar .NET 9.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restaurar dependencias'
      inputs:
        command: 'restore'
        projects: '$(projects)'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Compilar proyecto'
      inputs:
        command: 'build'
        projects: '$(projects)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Ejecutar pruebas'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --no-restore'

- stage: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Database_Migration
    displayName: 'Migración de base de datos'
    steps:
    - checkout: self
      persistCredentials: true

    - task: UseDotNet@2
      displayName: 'Instalar .NET 9.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Aplicar migraciones EF Core'
      inputs:
        command: 'custom'
        custom: 'ef'
        arguments: 'database update --project TestProjectCore.csproj --startup-project TestProjectCore.csproj'

  - job: Publish_Application
    displayName: 'Publicar aplicación'
    dependsOn: Database_Migration
    steps:
    - checkout: self
      persistCredentials: true

    - task: DotNetCoreCLI@2
      displayName: 'Publicar aplicación'
      inputs:
        command: 'publish'
        projects: 'TestProjectCore.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publicar artefactos'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Documentation
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Update_Changes_Log
    displayName: 'Actualizar documentación'
    steps:
    - checkout: self
      persistCredentials: true

    - script: |
        git config --global user.email "bymynynimonya@gmail.com"
        git config --global user.name "MAONLY2410"
        
        # Crear log de cambios más detallado
        echo "# Registro de cambios - $(fullTimestamp)" > CHANGES.md
        echo "## Build completado exitosamente" >> CHANGES.md
        echo "" >> CHANGES.md
        echo "### Archivos modificados:" >> CHANGES.md
        git diff --name-only HEAD^ HEAD | sed 's/^/- /' >> CHANGES.md
        echo "" >> CHANGES.md
        echo "### Archivos nuevos:" >> CHANGES.md
        git ls-files --others --exclude-standard | sed 's/^/- /' >> CHANGES.md
        echo "" >> CHANGES.md
        echo "*Actualizado automáticamente por Azure DevOps Pipeline*" >> CHANGES.md

        git add CHANGES.md
        git commit -m "docs: Actualizar registro de cambios - $(fullTimestamp) [skip ci]"
        git push origin HEAD:main
      displayName: 'Actualizar registro de cambios'
      env:
        GIT_SSL_NO_VERIFY: false